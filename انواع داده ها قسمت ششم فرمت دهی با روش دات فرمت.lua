انواع داده ها قسمت هفتم قالب بندی و فرمت دهی با روش دات فرمت

x = 5
y = 7.554457
print("x is {}\ny is {}\nz is {}".format(5, y, 5+7)) 
این نوع فرمت دهی یکی از روش های فرمت دهی در پایتون است که با استفاده از دستور format() انجام می‌شود. در این حالت، از {} برای جایگزینی مقادیر استفاده می‌شود. این روش فرمت دهی امکانات بیشتری نسبت به روش های سنتی فرمت دهی رشته‌ها در پایتون دارد.

در مثالی که شما ارائه دادید، ۳ مقدار برای جایگزینی در رشته وجود دارد. با استفاده از \n، یک خط جدید نیز به رشته اضافه شده است. همچنین عبارت ۵+۷ نیز به عنوان مقدار سوم در فرمت دهی استفاده شده است. در نهایت، با استفاده از متغیر y، یک عدد اعشاری نیز در رشته قرار داده شده است
الان ما با استفاده از آکولاد ها میتونیم داخل آکولاد شماره گذاری کنیم و ترتیب رو عوض کنیم یا تکرار کنیم
x = 5
y = 7.554457
print("x is {2}\ny is {0}\nz is {1}".format(5, y, 5+7))
یا میتونیم از دیکشنری ها استفاده کنیم
x ={'a':2,  'y':22,  'd':2.366} 
print("x is {a}\ny is {d}\nz is {y}".format(**x))
در این دیکشنری که در جلسات قبل بهش اشاره کردیم ما اومدیم ۳تا کلید استفاده کردیم با مقدار مشخص بعد درون آکولاد ها اومدیم اسم کلید هارو به ترتیب نوشتیم که میتونیم تکرارشون کنیم یا ترتیب رو عوض کنیم فقط برای استفاده از دیکشنری باید دوتا **بذاریم تو پرانتز
حالا اگر توالی داشته باشیم 

print("x is {1}\ny is {2}\nz is {0}".format(*"rez"))
چون سه تا هست ماهم سه کاراکتر تو پرانتز * و سه کاراکتر به صورت رشته مینویسیم
و به صورت لیست به ما نمایش میده
یا میتونیم از توالی لیست هم استفاده کنیم
print("x is {1}\ny is {2}\nz is {0}".format(*[1, 2, 3]))
خب این هارو هم به همون شکل اعداد رو برای ما چاپ کرد فقط باید یادمون باشه *حتما قبلش باشه
---------------------------------------------------------
حالت های مختلف استفاده از دات فرمت
# "{" [field_name]["!" conversion][":" format_spec] "}" 
برای مثال فیلد اسم میتونه اسم کلید باشه یا ایندکس عددی متغیر درون{x} 
 [field_name]
print("x is{x}".format(5))  
این اختیاریه حتی میتونیم خالی بذاریم

["!" conversion]
در حالت بعدی میتونیم علامت تعجب بذاریم و نوع داده رو مشخص کنیم میتونه
r, s, a باشه
آر برای همون کاراکتر شبیه رشته هست که دوطرفش کتیشن میذاره
اس برای رشته هست
اِیـ برای اسکی کد هست
اگر ایـ باشه برای ما اسکی کد چاپ میکنه اگر نباشه یونیکدشو اجرا میکنه
این چیزایی که جز حروف انگلیسی باشه رو خودشو چاپ میکنه
اینجا ما میگیم از نوع رشته باشه و برای ما چاپ کنه
print("x is{x!s}".format("ramin"))  

print("x is{x!r}".format("ramin"))

print("x is{x!a}".format("♕"))
در حالت اسکی این کاراکتر اگر وجود نداشته باشه کد یونیکدش رو به ما نشون میده

موردی بعدی که داریم که بعد از: نوشته میشه و کار اصلی ما اینجاست که مربوط میشه به فرمت اینجا ما میتونیم فرمتمون رو مشخص کنیم
print("x is{:.2}".format(1.5644)
مثلا اینجا اعداد اعشار داریم بعد از:  تعدادی که میخوایم برامون چاپ کنه رو مشخص میکنیم
------------------------------------------------------------------------------------------
حالا بعد از.    :  چه کارایی میتونیم انجام بدیم
# [[fill]] align] [sign] [#] [0] [width][grouping_option] [. precision] [type] 
همه این مواردی که اینجا هست بعد از.  :  نوشته میشن و همه موارد اختیاری هستن میتونیم استفاده نکنیم حتی تایپی که در فرمت دهی قبلی اجباری بود اینجا اختیاریه 
برای مثال  [type]
print("x is{0:c}".format(110))

(c) 
برای کاراکتره برای همین الان معادل ۱۱۰ رو n چاپ میکنه
(d) 

برای چاپ اعداد صحیح
ولی اینجا (i) وجود نداره
(f) 
(%) برای اعداد اعشاری

print("x is{0:%}".format(1/3))
میاد با درصد به صورت اعشاری نشون میده 
----------------------------
[. precision]
مورد بعدی نقطه اعشار هست
print("x is{0:.2f}".format(1.345678))
1.35
میایم تعداد اعداد اعشار رو مشخص میکنیم
-----------------------------------
][grouping_option]
مورد بعدی میتونیم ازش برای جدا کردن اعداد بزرگ استفاده کنیم مثلا قیمت یک کالا در فروشگاه
print("x is{0:_.2f}".format(1345678))
1_345_678
یا
print("x is{0:,.2f}".format(1345678))
1,345,678
به این شکل به ما نمایش میده
----------------------------------
[width]
مورد بعدی طول میدان هست که جلسه قبل درموردش صحبت کردیم
print("x is{0:20_.2f}".format(1345678))
طول میدان یعنی به اندازه ۲۰ کاراکتر فاصله میذاره برا ما
________
[0]
print("x is{0:020_.2f}".format(1345678))
خب اینجا صفر رو میتونیم بزاریم که طول میدان یا فاصله گذاری رو با صفر به ما نشون بده
__________
[#] 
در جلسه قبل گفتیم اعداد رو در مبنا های
 مختلف میتونیم چاپ کنیم 
print("x is{0:#b}".format(1345678))
خب اینجا با b در مبنای باینری یا دودویی چاپ میکنیم اعداد رو با استفاده از #
اون 0b اولش رو مینویسه حالا بر هرمبنایی که بخوایم بنویسیم
print("x is{0:#o}".format(1345678))
بر مبنای ۸ میشه 0o
print("x is{0:#x}".format(1345678))
برمبنای ۱۶ 0X
__________
[sign] 
برای مشخص کردن مثبت یا منفی بودن اعداد 
print("x is{0:+}".format(-1345678))
اگر عدد ما مثبت باشه خب + رو نشون میده اگر منفی باشه منفی ولی اگر بخوایم علامت عدد مثبت رو چاپ کنیم به این شکل انجام میدیم اگر میخاستیم میتونستیم در هر حالتی اینکارو انجام بدیم چون باید ترتیبشون رعایت بشه از بقیه دستورات استفاده نکردیم
حالا ما میتونیم جای مثبت یک اسپیس بزنیم اگر عدد ما مثبت باشه یک جای خالی کنار عدد برای ما میذاره اگر منفی باشه منفی رو نشون میده
_________
مورد بعدی              ]][align] 
با استفاده از این میتونیم کاراکتر های خودمون که میخوایم رو چپ چین یا راست چین یا وسط چین کنیم حالا برا اینکه قابل درک تر باشه با استفاده از طول میدان نشونش میدم
print("x is{0:<15}".format(12), "*", sep="")
الان با> چپ چین کردیم و طول میدان ۱۲ هست و با ستاره در قسمت بعدی فاصله رو مشخص کردیم 
print("x is{0:> 15}".format(12), "*", sep="")
الان با< راست چین کردیم
print("x is{0:^15}".format(12), "*", sep="")
الان با این علامت^ وسط چین کردیم

حالا ما میتونیم بگیم این طول میدان باچی پر کنه  با استفاده از   [fill] 
print("x is{0:+^15}".format(12), "*", sep="")
الان ما با استفاده از + گفتیم طول میدان رو پر کنه 
با هرچیزی که میخوایم میتونیم بگیم این فاصله هارو پر کنه
-------------------------------------------------------
ما جلسه قبل گفتیم نقطه اعشار رو از ورودی کاربر میگیریم بعضی وقتا میخوایم از بیرون اینارو مشخص کنیم 
اینجا یکم متفاوت تر این اتفاق میفته
هرکدوم از این موارد که من میخوام اینجا مشخص کنم بعد از دو نقطه قرار بود باشه میایم دوباره آکولاد هارو بازو بسته میکنم  داخل آکولاد اسمشو مینویسم
print("x is{0:{align}15}".format(12, align='<'), "*", sep="")
مثلا میگیم align تو آکولاد بعد میایم بعد از عدد ۱۲ مینویسیم align مساوی یا برابر باشه با علامت کوچیکتر بزرگتر که سمتش چپ میاد کاراکتر مارو چپ چین میکنه با استفاده از طول میدان مشخص میشه
بعد اگر بخوایم  علامت مثبت و منفی رو مشخص کنیم دوباره آکولاد باز میکنیم قبل از طول میدان 
print("x is{0:{align}}{sign} 15}".format(12, align='<', sign="+"), "*", sep="")
نتیجه رو اجرا کنیم مثبت رو کنار عدد۱۲ نشون میده
و به همین شکل هرکدوم اینارو بخوایم بیرون مشخص کنیم اینجوری استفاده میکنیم
همین طول میدانم میتونیم به این شکل استفاده کنیم
print("x is{0:{align}}{sign}15}{width}".format(12, width=20, align='<', sign="+"), "*", sep="")
به این شکل پایین
اینا مشخصا میتونن متغیری باشن که میشه از کاربر گرفت مثلا sign از کاربر میگیریم
x = input(" sign: ") 
print("x is{0:{align}}{sign}15}{width}".format(12, width=20, align='<', sign=x), "*", sep="")
چون اینپوت یا ورودی ما ب صورت پیشفرض رشته هست نیازی نیست عوضش کنیم حالا کاربر مثبت یا منفی رو تایین کنه اینجا کنار ۱۲ به ما نشون میده
یا مثلا بخوایم align رو از کاربر بگیریم به همین شکل 
x = input(" align: ") 
print("x is{0:{align}}{sign}15}{width}".format(12, width=20, align=x, sign="+"), "*", sep="")
فقط باید حواسمون باشه کاربر فقط میتونه از علامت های ^<> برای چپ چین وسط چین راست چین استفاده کنه در غیر اینصورت ارور میده چون وجود نداره
تمام این توضیحات داخل قسمت داکیومنت پایتون هست که بخوایم حالت های مختلف فرمت دهی در رشته رو بخونیم  وارد سایتش میشیم 
www.docs.python.org/3/library/string.html
اینجا یه قسمتی داره به اسم
format string syntax
درمورد تایپ ها فرمت دهی و حالت های مختلفش رو بخونیم کاملتر بفهمیم
----------------------------------------------------------
